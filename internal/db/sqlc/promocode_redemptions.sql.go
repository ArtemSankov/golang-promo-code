// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: promocode_redemptions.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRedemption = `-- name: CreateRedemption :one
INSERT INTO promocode_redemptions (id, promocode_id, user_id, redeemed_at)
VALUES (gen_random_uuid(), $1, $2, $3)
RETURNING id, promocode_id, user_id, redeemed_at
`

type CreateRedemptionParams struct {
	PromocodeID uuid.UUID `json:"promocode_id"`
	UserID      string    `json:"user_id"`
	RedeemedAt  time.Time `json:"redeemed_at"`
}

func (q *Queries) CreateRedemption(ctx context.Context, arg CreateRedemptionParams) (PromocodeRedemption, error) {
	row := q.db.QueryRow(ctx, createRedemption, arg.PromocodeID, arg.UserID, arg.RedeemedAt)
	var i PromocodeRedemption
	err := row.Scan(
		&i.ID,
		&i.PromocodeID,
		&i.UserID,
		&i.RedeemedAt,
	)
	return i, err
}

const getRedemptionByID = `-- name: GetRedemptionByID :one
SELECT id, promocode_id, user_id, redeemed_at
FROM promocode_redemptions
WHERE id = $1
`

func (q *Queries) GetRedemptionByID(ctx context.Context, id uuid.UUID) (PromocodeRedemption, error) {
	row := q.db.QueryRow(ctx, getRedemptionByID, id)
	var i PromocodeRedemption
	err := row.Scan(
		&i.ID,
		&i.PromocodeID,
		&i.UserID,
		&i.RedeemedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: promocodes.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPromoCode = `-- name: CreatePromoCode :one
INSERT INTO promocodes (id, code, discount_type, discount_value, max_activations, activations_count, expires_at)
VALUES (gen_random_uuid(), $1, $2, $3, $4, 0, $5)
RETURNING id
`

type CreatePromoCodeParams struct {
	Code           string    `json:"code"`
	DiscountType   string    `json:"discount_type"`
	DiscountValue  int32     `json:"discount_value"`
	MaxActivations int32     `json:"max_activations"`
	ExpiresAt      time.Time `json:"expires_at"`
}

func (q *Queries) CreatePromoCode(ctx context.Context, arg CreatePromoCodeParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createPromoCode,
		arg.Code,
		arg.DiscountType,
		arg.DiscountValue,
		arg.MaxActivations,
		arg.ExpiresAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getPromoCodeByCode = `-- name: GetPromoCodeByCode :one
SELECT id, code, discount_type, discount_value, max_activations, activations_count, expires_at, created_at
FROM promocodes
WHERE code = $1
`

func (q *Queries) GetPromoCodeByCode(ctx context.Context, code string) (Promocode, error) {
	row := q.db.QueryRow(ctx, getPromoCodeByCode, code)
	var i Promocode
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.DiscountType,
		&i.DiscountValue,
		&i.MaxActivations,
		&i.ActivationsCount,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const incrementActivationsCount = `-- name: IncrementActivationsCount :exec
UPDATE promocodes
SET activations_count = activations_count + 1
WHERE id = $1 AND activations_count < max_activations
`

func (q *Queries) IncrementActivationsCount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, incrementActivationsCount, id)
	return err
}
